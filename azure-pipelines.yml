trigger:
  branches:
    include:
      - master
      - refs/tags/*
      
variables:
  major: 1
  minor: 0
  patch: 0
  revision: $[counter('versioncounter', 0)]
  system.debug: "true"
  githubOrganization: 'HoeflingSoftware'
  githubRepo: 'Dnn.KeyMaster'

jobs:
- job: Prebuild
  displayName: Pre-Build steps
  pool:
    name: Hosted VS2017

  steps:
  - powershell: '$(System.DefaultWorkingDirectory)\BuildUtilities\getBuildVariables.ps1; exit $LASTEXITCODE' 
    displayName: Build Variables
    name: CustomVariables
    
- job: Build
  dependsOn: Prebuild
  displayName: Build and Create Installer
  pool:
    name: Hosted VS2017
    demands:
    - MSBuild

  steps:
  - powershell: '$(System.DefaultWorkingDirectory)\build.ps1 -Target Package -ScriptArgs "-package_version=$env:VERSION"; exit $LASTEXITCODE'
    env:
      VERSION: "$(major).$(minor).$(patch).$(revision)"
    displayName: 'Cake Build - Clean, NuGet, Build and Package'

  - task: CopyFiles@2
    displayName: 'Copy Files to Artifacts Staging Directory'
    inputs:
      SourceFolder: '$(System.DefaultWorkingDirectory)'
      Contents: '**/*_install.zip'
      TargetFolder: '$(Build.ArtifactStagingDirectory)'
      flattenFolders: true

  - task: PublishBuildArtifacts@1
    displayName: 'Publish Artifacts: drop'
    inputs:
      PathtoPublish: '$(Build.ArtifactStagingDirectory)'

- job: Release
  dependsOn: Build
  displayName: Release
  pool:
    name: "Hosted VS2017"
  condition: and(succeeded(), startswith(variables['Build.SourceBranch'], 'refs/tags'))

  steps:
  - task: DownloadBuildArtifacts@0
    displayName: 'Download Build Artifacts'
    inputs:
      artifactName: drop
      downloadPath: $(System.DefaultWorkingDirectory) 

  - task: Npm@1
    displayName: 'npm install github-release-notes'
    inputs:
      command: custom
      verbose: false
      customCommand: 'install github-release-notes -g'

  - powershell: 'gren release --username=$(githubOrganization) --token=$env:TOKEN --repo=$(githubRepo); exit $LASTEXITCODE'
    env:
      TOKEN: $(githubToken)
    displayName: 'Create GitHub Release'

  - powershell: '$(System.DefaultWorkingDirectory)\BuildUtilities\uploadReleaseArtifacts.ps1 -Organization $(githubOrganization) -Repo $(githubRepo) -Token $(githubToken) -Artifact $(System.DefaultWorkingDirectory)/*_install.zip  -Name "$(githubRepo)_$(major).$(minor).$(patch).$(revision)_install.zip"; exit $LASTEXITCODE'
    displayName: 'Upload Artifacts to GitHub Release'

